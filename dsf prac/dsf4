#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* prev;
    struct node* next;
};

struct node* head = NULL;

void createNodeAtBeginning(int info) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    temp->data = info;
    temp->prev = NULL;

    if (head == NULL) {
        temp->next = NULL;
        head = temp;
    } else {
        temp->next = head;
        head->prev = temp;
        head = temp;
    }
}

void traverse() {
    printf("List elements: ");
    struct node* temp = head;
    if (temp == NULL) {
        printf("List is empty.\n");
        return;
    }

    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void insertAtPosition(int data, int pos) {
    if (pos < 1) {
        printf("Invalid position.\n");
        return;
    }

    struct node* temp = head;
    int count = 1;

    if (pos == 1) {
        createNodeAtBeginning(data);
        return;
    }

    while (temp->next != NULL && count < pos - 1) {
        temp = temp->next;
        count++;
    }

    if (temp->next == NULL && count < pos - 1) {
        printf("Position exceeds list size.\n");
        return;
    }

    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    newNode->data = data;
    newNode->next = temp->next;
    temp->next->prev = newNode;
    newNode->prev = temp;
    temp->next = newNode;
}

void deleteNode(int data) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct node* temp = head;

    if (temp->data == data) {
        if (temp->next == NULL) { // Single node in the list
            head = NULL;
            free(temp);
            return;
        }

        head = temp->next;
        head->prev = NULL;
        free(temp);
        return;
    }

    while (temp->next != NULL && temp->next->data != data) {
        temp = temp->next;
    }

    if (temp->next == NULL) {
        printf("Data not found in the list.\n");
        return;
    }

    struct node* delNode = temp->next;
    temp->next = delNode->next;
    delNode->next->prev = temp;
    free(delNode);
}

int searchNode(int data) {
    struct node* temp = head;
    int count = 0;

    while (temp != NULL) {
        if (temp->data == data) {
            return count;
        }
        count++;
        temp = temp->next;
    }

    return -1; // Data not found
}

int countNodes() {
    int count = 0;
    struct node* temp = head;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }
    return count;
}

void reverseList() {
    if (head == NULL || head->next == NULL) {
        return; // Empty list or single node
    }

    struct node* temp = head, *current = NULL;

    while (temp != NULL) {
        current = temp->next;
        temp->next = temp->prev;
        temp->prev = current;
        temp = current;
    }

    head = current; // Update head pointer after reversal
}

int main() {
    int choice, data, pos;

    while (1) {
        printf("\nDoubly Linked List Menu\n");
        printf("1. Create Node (at beginning)\n");
        printf("2. Insert Node (at any position)\n");
        printf("3. Delete Node\n");
        printf("4. Traverse List\n");
        printf("5. Search Node\n");
        printf("6. Count Nodes\n");
        printf("7. Reverse List\n");
        printf("8. Exit\n");

        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                createNodeAtBeginning(data);
                break;
            case 2:
                printf("Enter data and position to insert: ");
                scanf("%d %d", &data, &pos);
                insertAtPosition(data, pos);
                break;
            case 3:
                printf("Enter data to delete: ");
                scanf("%d", &data);
                deleteNode(data);
                break;
            case 4:
                traverse();
                break;
            case 5:
                printf("Enter data to search: ");
                scanf("%d", &data);
                int position = searchNode(data);
                if (position == -1) {
                    printf("Data not found in the list.\n");
                } else {
                    printf("Data found at position %d.\n", position);
                }
                break;
            case 6:
                printf("Number of nodes: %d\n", countNodes());
                break;
            case 7:
                reverseList();
                printf("List reversed.\n");
                break;
            case 8:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice.\n");
        }
    }

    return 0;
}
