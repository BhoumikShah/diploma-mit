#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* head = NULL;

void createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void displayList() {
    struct Node* temp = head;
    if (temp == NULL) {
        printf("List is empty.\n");
        return;
    }

    printf("List elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void concatenate(struct Node* head2) {
    if (head == NULL) {
        head = head2;
        return;
    }

    struct Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = head2;
}

int countNodes() {
    int count = 0;
    struct Node* temp = head;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }
    return count;
}

void reverseList() {
    struct Node* prev = NULL, *curr = head, *next;
    while (curr != NULL) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    head = prev;
}

void deleteNode(int data) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = head, *prev = NULL;

    // If head node needs to be deleted
    if (temp != NULL && temp->data == data) {
        head = temp->next;
        free(temp);
        return;
    }

    // Find the node to delete
    while (temp != NULL && temp->data != data) {
        prev = temp;
        temp = temp->next;
    }

    // If node not found
    if (temp == NULL) {
        printf("Data not found in the list.\n");
        return;
    }

    // Delete the node
    prev->next = temp->next;
    free(temp);
}

int main() {
    int choice, data;
    struct Node* head2 = NULL;

    while (1) {
        printf("\n1. Create Node\n");
        printf("2. Display List\n");
        printf("3. Concatenate Lists\n");
        printf("4. Delete Node\n");
        printf("5. Count Nodes\n");
        printf("6. Reverse List\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data: ");
                scanf("%d", &data);
                createNode(data); // Call createNode with only data argument
                break;
            case 2:
                displayList();
                break;
            case 3:
                printf("Create second list (if not already created)\n");
                while (1) {
                    int ch;
                    printf("Do you want to create a node for the second list (1/0)? ");
                    scanf("%d", &ch);
                    if (ch == 1) {
                        printf("Enter data: ");
                        scanf("%d", &data);
                        createNode(data); // Ensure only data is passed here
                    } else {
                        break;
                    }
                }
                printf("Concatenating lists...\n");
                concatenate(head2);
                head2 = NULL; // Reset second list for future concatenations
                break;
            case 4:
                printf("Enter data to delete: ");
                scanf("%d", &data);
                                deleteNode(data);
                break;
            case 5:
                int count = countNodes();
                printf("Number of nodes: %d\n", count);
                break;
            case 6:
                printf("Reversing list...\n");
                reverseList();
                break;
            case 7:
                exit(0);
            default:
                printf("Invalid choice.\n");
        }
    }

    return 0;
}

                